/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.integratedmodelling.klab.data;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** The payload of any contextualization is a top-level Instance. Any ERROR-level
notification in the top-level Instance means that contextualization has failed. */
@org.apache.avro.specific.AvroGenerated
public class Instance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7712039635804847964L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Instance\",\"namespace\":\"org.integratedmodelling.klab.data\",\"doc\":\"The payload of any contextualization is a top-level Instance. Any ERROR-level\\r\\nnotification in the top-level Instance means that contextualization has failed.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"geometry\",\"type\":\"string\"},{\"name\":\"notifications\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Notification\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"activityUrn\",\"type\":[\"null\",\"string\"]},{\"name\":\"metadata\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"name\":\"code\",\"type\":[\"null\",\"int\"]},{\"name\":\"level\",\"type\":{\"type\":\"enum\",\"name\":\"Level\",\"symbols\":[\"DEBUG\",\"INFO\",\"WARNING\",\"ERROR\"]}}]}}},{\"name\":\"attributes\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"name\":\"metadata\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"name\":\"states\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"State\",\"doc\":\"State record\",\"fields\":[{\"name\":\"urn\",\"type\":\"string\"},{\"name\":\"doubleData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}]},{\"name\":\"longData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"long\"}]},{\"name\":\"intData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]},{\"name\":\"floatData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"float\"}]}]}}]},{\"name\":\"instances\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"Instance\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Instance> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Instance> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Instance> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Instance> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Instance> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Instance to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Instance from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Instance instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Instance fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence name;
  private java.lang.CharSequence geometry;
  private java.util.List<org.integratedmodelling.klab.data.Notification> notifications;
  private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;
  private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> metadata;
  private java.util.List<org.integratedmodelling.klab.data.State> states;
  private java.util.List<org.integratedmodelling.klab.data.Instance> instances;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Instance() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param geometry The new value for geometry
   * @param notifications The new value for notifications
   * @param attributes The new value for attributes
   * @param metadata The new value for metadata
   * @param states The new value for states
   * @param instances The new value for instances
   */
  public Instance(java.lang.CharSequence name, java.lang.CharSequence geometry, java.util.List<org.integratedmodelling.klab.data.Notification> notifications, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> metadata, java.util.List<org.integratedmodelling.klab.data.State> states, java.util.List<org.integratedmodelling.klab.data.Instance> instances) {
    this.name = name;
    this.geometry = geometry;
    this.notifications = notifications;
    this.attributes = attributes;
    this.metadata = metadata;
    this.states = states;
    this.instances = instances;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return geometry;
    case 2: return notifications;
    case 3: return attributes;
    case 4: return metadata;
    case 5: return states;
    case 6: return instances;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: geometry = (java.lang.CharSequence)value$; break;
    case 2: notifications = (java.util.List<org.integratedmodelling.klab.data.Notification>)value$; break;
    case 3: attributes = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 4: metadata = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 5: states = (java.util.List<org.integratedmodelling.klab.data.State>)value$; break;
    case 6: instances = (java.util.List<org.integratedmodelling.klab.data.Instance>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'geometry' field.
   * @return The value of the 'geometry' field.
   */
  public java.lang.CharSequence getGeometry() {
    return geometry;
  }


  /**
   * Sets the value of the 'geometry' field.
   * @param value the value to set.
   */
  public void setGeometry(java.lang.CharSequence value) {
    this.geometry = value;
  }

  /**
   * Gets the value of the 'notifications' field.
   * @return The value of the 'notifications' field.
   */
  public java.util.List<org.integratedmodelling.klab.data.Notification> getNotifications() {
    return notifications;
  }


  /**
   * Sets the value of the 'notifications' field.
   * @param value the value to set.
   */
  public void setNotifications(java.util.List<org.integratedmodelling.klab.data.Notification> value) {
    this.notifications = value;
  }

  /**
   * Gets the value of the 'attributes' field.
   * @return The value of the 'attributes' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
    return attributes;
  }


  /**
   * Sets the value of the 'attributes' field.
   * @param value the value to set.
   */
  public void setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.attributes = value;
  }

  /**
   * Gets the value of the 'metadata' field.
   * @return The value of the 'metadata' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMetadata() {
    return metadata;
  }


  /**
   * Sets the value of the 'metadata' field.
   * @param value the value to set.
   */
  public void setMetadata(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.metadata = value;
  }

  /**
   * Gets the value of the 'states' field.
   * @return The value of the 'states' field.
   */
  public java.util.List<org.integratedmodelling.klab.data.State> getStates() {
    return states;
  }


  /**
   * Sets the value of the 'states' field.
   * @param value the value to set.
   */
  public void setStates(java.util.List<org.integratedmodelling.klab.data.State> value) {
    this.states = value;
  }

  /**
   * Gets the value of the 'instances' field.
   * @return The value of the 'instances' field.
   */
  public java.util.List<org.integratedmodelling.klab.data.Instance> getInstances() {
    return instances;
  }


  /**
   * Sets the value of the 'instances' field.
   * @param value the value to set.
   */
  public void setInstances(java.util.List<org.integratedmodelling.klab.data.Instance> value) {
    this.instances = value;
  }

  /**
   * Creates a new Instance RecordBuilder.
   * @return A new Instance RecordBuilder
   */
  public static org.integratedmodelling.klab.data.Instance.Builder newBuilder() {
    return new org.integratedmodelling.klab.data.Instance.Builder();
  }

  /**
   * Creates a new Instance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Instance RecordBuilder
   */
  public static org.integratedmodelling.klab.data.Instance.Builder newBuilder(org.integratedmodelling.klab.data.Instance.Builder other) {
    if (other == null) {
      return new org.integratedmodelling.klab.data.Instance.Builder();
    } else {
      return new org.integratedmodelling.klab.data.Instance.Builder(other);
    }
  }

  /**
   * Creates a new Instance RecordBuilder by copying an existing Instance instance.
   * @param other The existing instance to copy.
   * @return A new Instance RecordBuilder
   */
  public static org.integratedmodelling.klab.data.Instance.Builder newBuilder(org.integratedmodelling.klab.data.Instance other) {
    if (other == null) {
      return new org.integratedmodelling.klab.data.Instance.Builder();
    } else {
      return new org.integratedmodelling.klab.data.Instance.Builder(other);
    }
  }

  /**
   * RecordBuilder for Instance instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Instance>
    implements org.apache.avro.data.RecordBuilder<Instance> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence geometry;
    private java.util.List<org.integratedmodelling.klab.data.Notification> notifications;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> metadata;
    private java.util.List<org.integratedmodelling.klab.data.State> states;
    private java.util.List<org.integratedmodelling.klab.data.Instance> instances;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.integratedmodelling.klab.data.Instance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.geometry)) {
        this.geometry = data().deepCopy(fields()[1].schema(), other.geometry);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.notifications)) {
        this.notifications = data().deepCopy(fields()[2].schema(), other.notifications);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.attributes)) {
        this.attributes = data().deepCopy(fields()[3].schema(), other.attributes);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.metadata)) {
        this.metadata = data().deepCopy(fields()[4].schema(), other.metadata);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.states)) {
        this.states = data().deepCopy(fields()[5].schema(), other.states);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.instances)) {
        this.instances = data().deepCopy(fields()[6].schema(), other.instances);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing Instance instance
     * @param other The existing instance to copy.
     */
    private Builder(org.integratedmodelling.klab.data.Instance other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.geometry)) {
        this.geometry = data().deepCopy(fields()[1].schema(), other.geometry);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.notifications)) {
        this.notifications = data().deepCopy(fields()[2].schema(), other.notifications);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.attributes)) {
        this.attributes = data().deepCopy(fields()[3].schema(), other.attributes);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.metadata)) {
        this.metadata = data().deepCopy(fields()[4].schema(), other.metadata);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.states)) {
        this.states = data().deepCopy(fields()[5].schema(), other.states);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.instances)) {
        this.instances = data().deepCopy(fields()[6].schema(), other.instances);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'geometry' field.
      * @return The value.
      */
    public java.lang.CharSequence getGeometry() {
      return geometry;
    }


    /**
      * Sets the value of the 'geometry' field.
      * @param value The value of 'geometry'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder setGeometry(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.geometry = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'geometry' field has been set.
      * @return True if the 'geometry' field has been set, false otherwise.
      */
    public boolean hasGeometry() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'geometry' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder clearGeometry() {
      geometry = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'notifications' field.
      * @return The value.
      */
    public java.util.List<org.integratedmodelling.klab.data.Notification> getNotifications() {
      return notifications;
    }


    /**
      * Sets the value of the 'notifications' field.
      * @param value The value of 'notifications'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder setNotifications(java.util.List<org.integratedmodelling.klab.data.Notification> value) {
      validate(fields()[2], value);
      this.notifications = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'notifications' field has been set.
      * @return True if the 'notifications' field has been set, false otherwise.
      */
    public boolean hasNotifications() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'notifications' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder clearNotifications() {
      notifications = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'attributes' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
      return attributes;
    }


    /**
      * Sets the value of the 'attributes' field.
      * @param value The value of 'attributes'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.attributes = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'attributes' field has been set.
      * @return True if the 'attributes' field has been set, false otherwise.
      */
    public boolean hasAttributes() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'attributes' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder clearAttributes() {
      attributes = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'metadata' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getMetadata() {
      return metadata;
    }


    /**
      * Sets the value of the 'metadata' field.
      * @param value The value of 'metadata'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder setMetadata(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.metadata = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'metadata' field has been set.
      * @return True if the 'metadata' field has been set, false otherwise.
      */
    public boolean hasMetadata() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'metadata' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder clearMetadata() {
      metadata = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'states' field.
      * @return The value.
      */
    public java.util.List<org.integratedmodelling.klab.data.State> getStates() {
      return states;
    }


    /**
      * Sets the value of the 'states' field.
      * @param value The value of 'states'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder setStates(java.util.List<org.integratedmodelling.klab.data.State> value) {
      validate(fields()[5], value);
      this.states = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'states' field has been set.
      * @return True if the 'states' field has been set, false otherwise.
      */
    public boolean hasStates() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'states' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder clearStates() {
      states = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'instances' field.
      * @return The value.
      */
    public java.util.List<org.integratedmodelling.klab.data.Instance> getInstances() {
      return instances;
    }


    /**
      * Sets the value of the 'instances' field.
      * @param value The value of 'instances'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder setInstances(java.util.List<org.integratedmodelling.klab.data.Instance> value) {
      validate(fields()[6], value);
      this.instances = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'instances' field has been set.
      * @return True if the 'instances' field has been set, false otherwise.
      */
    public boolean hasInstances() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'instances' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Instance.Builder clearInstances() {
      instances = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Instance build() {
      try {
        Instance record = new Instance();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.geometry = fieldSetFlags()[1] ? this.geometry : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.notifications = fieldSetFlags()[2] ? this.notifications : (java.util.List<org.integratedmodelling.klab.data.Notification>) defaultValue(fields()[2]);
        record.attributes = fieldSetFlags()[3] ? this.attributes : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[3]);
        record.metadata = fieldSetFlags()[4] ? this.metadata : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[4]);
        record.states = fieldSetFlags()[5] ? this.states : (java.util.List<org.integratedmodelling.klab.data.State>) defaultValue(fields()[5]);
        record.instances = fieldSetFlags()[6] ? this.instances : (java.util.List<org.integratedmodelling.klab.data.Instance>) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Instance>
    WRITER$ = (org.apache.avro.io.DatumWriter<Instance>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Instance>
    READER$ = (org.apache.avro.io.DatumReader<Instance>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeString(this.geometry);

    long size0 = this.notifications.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (org.integratedmodelling.klab.data.Notification e0: this.notifications) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    if (this.attributes == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.attributes.size();
      out.writeMapStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e1: this.attributes.entrySet()) {
        actualSize1++;
        out.startItem();
        out.writeString(e1.getKey());
        java.lang.CharSequence v1 = e1.getValue();
        out.writeString(v1);
      }
      out.writeMapEnd();
      if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.metadata == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.metadata.size();
      out.writeMapStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (java.util.Map.Entry<java.lang.CharSequence, java.lang.CharSequence> e2: this.metadata.entrySet()) {
        actualSize2++;
        out.startItem();
        out.writeString(e2.getKey());
        java.lang.CharSequence v2 = e2.getValue();
        out.writeString(v2);
      }
      out.writeMapEnd();
      if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Map-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.states == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.states.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (org.integratedmodelling.klab.data.State e3: this.states) {
        actualSize3++;
        out.startItem();
        e3.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

    if (this.instances == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size4 = this.instances.size();
      out.writeArrayStart();
      out.setItemCount(size4);
      long actualSize4 = 0;
      for (org.integratedmodelling.klab.data.Instance e4: this.instances) {
        actualSize4++;
        out.startItem();
        e4.customEncode(out);
      }
      out.writeArrayEnd();
      if (actualSize4 != size4)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.geometry = in.readString(this.geometry instanceof Utf8 ? (Utf8)this.geometry : null);

      long size0 = in.readArrayStart();
      java.util.List<org.integratedmodelling.klab.data.Notification> a0 = this.notifications;
      if (a0 == null) {
        a0 = new SpecificData.Array<org.integratedmodelling.klab.data.Notification>((int)size0, SCHEMA$.getField("notifications").schema());
        this.notifications = a0;
      } else a0.clear();
      SpecificData.Array<org.integratedmodelling.klab.data.Notification> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.Notification>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          org.integratedmodelling.klab.data.Notification e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new org.integratedmodelling.klab.data.Notification();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.attributes = null;
      } else {
        long size1 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.attributes; // Need fresh name due to limitation of macro system
        if (m1 == null) {
          m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)(size1 * 4)/3 + 1);
          this.attributes = m1;
        } else m1.clear();
        for ( ; 0 < size1; size1 = in.mapNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.CharSequence k1 = null;
            k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
            java.lang.CharSequence v1 = null;
            v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
            m1.put(k1, v1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.metadata = null;
      } else {
        long size2 = in.readMapStart();
        java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m2 = this.metadata; // Need fresh name due to limitation of macro system
        if (m2 == null) {
          m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)(size2 * 4)/3 + 1);
          this.metadata = m2;
        } else m2.clear();
        for ( ; 0 < size2; size2 = in.mapNext()) {
          for ( ; size2 != 0; size2--) {
            java.lang.CharSequence k2 = null;
            k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
            java.lang.CharSequence v2 = null;
            v2 = in.readString(v2 instanceof Utf8 ? (Utf8)v2 : null);
            m2.put(k2, v2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.states = null;
      } else {
        long size3 = in.readArrayStart();
        java.util.List<org.integratedmodelling.klab.data.State> a3 = this.states;
        if (a3 == null) {
          a3 = new SpecificData.Array<org.integratedmodelling.klab.data.State>((int)size3, SCHEMA$.getField("states").schema().getTypes().get(1));
          this.states = a3;
        } else a3.clear();
        SpecificData.Array<org.integratedmodelling.klab.data.State> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.State>)a3 : null);
        for ( ; 0 < size3; size3 = in.arrayNext()) {
          for ( ; size3 != 0; size3--) {
            org.integratedmodelling.klab.data.State e3 = (ga3 != null ? ga3.peek() : null);
            if (e3 == null) {
              e3 = new org.integratedmodelling.klab.data.State();
            }
            e3.customDecode(in);
            a3.add(e3);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.instances = null;
      } else {
        long size4 = in.readArrayStart();
        java.util.List<org.integratedmodelling.klab.data.Instance> a4 = this.instances;
        if (a4 == null) {
          a4 = new SpecificData.Array<org.integratedmodelling.klab.data.Instance>((int)size4, SCHEMA$.getField("instances").schema().getTypes().get(1));
          this.instances = a4;
        } else a4.clear();
        SpecificData.Array<org.integratedmodelling.klab.data.Instance> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.Instance>)a4 : null);
        for ( ; 0 < size4; size4 = in.arrayNext()) {
          for ( ; size4 != 0; size4--) {
            org.integratedmodelling.klab.data.Instance e4 = (ga4 != null ? ga4.peek() : null);
            if (e4 == null) {
              e4 = new org.integratedmodelling.klab.data.Instance();
            }
            e4.customDecode(in);
            a4.add(e4);
          }
        }
      }

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 1:
          this.geometry = in.readString(this.geometry instanceof Utf8 ? (Utf8)this.geometry : null);
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<org.integratedmodelling.klab.data.Notification> a0 = this.notifications;
          if (a0 == null) {
            a0 = new SpecificData.Array<org.integratedmodelling.klab.data.Notification>((int)size0, SCHEMA$.getField("notifications").schema());
            this.notifications = a0;
          } else a0.clear();
          SpecificData.Array<org.integratedmodelling.klab.data.Notification> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.Notification>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              org.integratedmodelling.klab.data.Notification e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new org.integratedmodelling.klab.data.Notification();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.attributes = null;
          } else {
            long size1 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m1 = this.attributes; // Need fresh name due to limitation of macro system
            if (m1 == null) {
              m1 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)(size1 * 4)/3 + 1);
              this.attributes = m1;
            } else m1.clear();
            for ( ; 0 < size1; size1 = in.mapNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.CharSequence k1 = null;
                k1 = in.readString(k1 instanceof Utf8 ? (Utf8)k1 : null);
                java.lang.CharSequence v1 = null;
                v1 = in.readString(v1 instanceof Utf8 ? (Utf8)v1 : null);
                m1.put(k1, v1);
              }
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.metadata = null;
          } else {
            long size2 = in.readMapStart();
            java.util.Map<java.lang.CharSequence,java.lang.CharSequence> m2 = this.metadata; // Need fresh name due to limitation of macro system
            if (m2 == null) {
              m2 = new java.util.HashMap<java.lang.CharSequence,java.lang.CharSequence>((int)(size2 * 4)/3 + 1);
              this.metadata = m2;
            } else m2.clear();
            for ( ; 0 < size2; size2 = in.mapNext()) {
              for ( ; size2 != 0; size2--) {
                java.lang.CharSequence k2 = null;
                k2 = in.readString(k2 instanceof Utf8 ? (Utf8)k2 : null);
                java.lang.CharSequence v2 = null;
                v2 = in.readString(v2 instanceof Utf8 ? (Utf8)v2 : null);
                m2.put(k2, v2);
              }
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.states = null;
          } else {
            long size3 = in.readArrayStart();
            java.util.List<org.integratedmodelling.klab.data.State> a3 = this.states;
            if (a3 == null) {
              a3 = new SpecificData.Array<org.integratedmodelling.klab.data.State>((int)size3, SCHEMA$.getField("states").schema().getTypes().get(1));
              this.states = a3;
            } else a3.clear();
            SpecificData.Array<org.integratedmodelling.klab.data.State> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.State>)a3 : null);
            for ( ; 0 < size3; size3 = in.arrayNext()) {
              for ( ; size3 != 0; size3--) {
                org.integratedmodelling.klab.data.State e3 = (ga3 != null ? ga3.peek() : null);
                if (e3 == null) {
                  e3 = new org.integratedmodelling.klab.data.State();
                }
                e3.customDecode(in);
                a3.add(e3);
              }
            }
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.instances = null;
          } else {
            long size4 = in.readArrayStart();
            java.util.List<org.integratedmodelling.klab.data.Instance> a4 = this.instances;
            if (a4 == null) {
              a4 = new SpecificData.Array<org.integratedmodelling.klab.data.Instance>((int)size4, SCHEMA$.getField("instances").schema().getTypes().get(1));
              this.instances = a4;
            } else a4.clear();
            SpecificData.Array<org.integratedmodelling.klab.data.Instance> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.Instance>)a4 : null);
            for ( ; 0 < size4; size4 = in.arrayNext()) {
              for ( ; size4 != 0; size4--) {
                org.integratedmodelling.klab.data.Instance e4 = (ga4 != null ? ga4.peek() : null);
                if (e4 == null) {
                  e4 = new org.integratedmodelling.klab.data.Instance();
                }
                e4.customDecode(in);
                a4.add(e4);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










