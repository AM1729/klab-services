/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.integratedmodelling.klab.data;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** The standard payload of a contextualization request */
@org.apache.avro.specific.AvroGenerated
public class Payload extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4667631364591839186L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Payload\",\"namespace\":\"org.integratedmodelling.klab.data\",\"doc\":\"The standard payload of a contextualization request\",\"fields\":[{\"name\":\"notifications\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Notification\",\"fields\":[{\"name\":\"message\",\"type\":\"string\"},{\"name\":\"code\",\"type\":\"int\"},{\"name\":\"level\",\"type\":{\"type\":\"enum\",\"name\":\"Level\",\"symbols\":[\"DEBUG\",\"INFO\",\"WARNING\",\"ERROR\"]}}]}}},{\"name\":\"states\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"State\",\"doc\":\"State record. If name is 'default' the state is for the main observable.\",\"fields\":[{\"name\":\"name\",\"type\":[\"string\",\"null\"],\"default\":\"default\"},{\"name\":\"doubleData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\"}]},{\"name\":\"longData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"long\"}]},{\"name\":\"intData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}]},{\"name\":\"floatData\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"float\"}]}]}}},{\"name\":\"instances\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Instance\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"geometry\",\"type\":\"string\"},{\"name\":\"attributes\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"metadata\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"states\",\"type\":{\"type\":\"array\",\"items\":\"State\"}},{\"name\":\"instances\",\"type\":{\"type\":\"array\",\"items\":\"Instance\"}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Payload> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Payload> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Payload> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Payload> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Payload> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Payload to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Payload from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Payload instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Payload fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.util.List<org.integratedmodelling.klab.data.Notification> notifications;
  private java.util.List<org.integratedmodelling.klab.data.State> states;
  private java.util.List<org.integratedmodelling.klab.data.Instance> instances;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Payload() {}

  /**
   * All-args constructor.
   * @param notifications The new value for notifications
   * @param states The new value for states
   * @param instances The new value for instances
   */
  public Payload(java.util.List<org.integratedmodelling.klab.data.Notification> notifications, java.util.List<org.integratedmodelling.klab.data.State> states, java.util.List<org.integratedmodelling.klab.data.Instance> instances) {
    this.notifications = notifications;
    this.states = states;
    this.instances = instances;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return notifications;
    case 1: return states;
    case 2: return instances;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: notifications = (java.util.List<org.integratedmodelling.klab.data.Notification>)value$; break;
    case 1: states = (java.util.List<org.integratedmodelling.klab.data.State>)value$; break;
    case 2: instances = (java.util.List<org.integratedmodelling.klab.data.Instance>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'notifications' field.
   * @return The value of the 'notifications' field.
   */
  public java.util.List<org.integratedmodelling.klab.data.Notification> getNotifications() {
    return notifications;
  }


  /**
   * Sets the value of the 'notifications' field.
   * @param value the value to set.
   */
  public void setNotifications(java.util.List<org.integratedmodelling.klab.data.Notification> value) {
    this.notifications = value;
  }

  /**
   * Gets the value of the 'states' field.
   * @return The value of the 'states' field.
   */
  public java.util.List<org.integratedmodelling.klab.data.State> getStates() {
    return states;
  }


  /**
   * Sets the value of the 'states' field.
   * @param value the value to set.
   */
  public void setStates(java.util.List<org.integratedmodelling.klab.data.State> value) {
    this.states = value;
  }

  /**
   * Gets the value of the 'instances' field.
   * @return The value of the 'instances' field.
   */
  public java.util.List<org.integratedmodelling.klab.data.Instance> getInstances() {
    return instances;
  }


  /**
   * Sets the value of the 'instances' field.
   * @param value the value to set.
   */
  public void setInstances(java.util.List<org.integratedmodelling.klab.data.Instance> value) {
    this.instances = value;
  }

  /**
   * Creates a new Payload RecordBuilder.
   * @return A new Payload RecordBuilder
   */
  public static org.integratedmodelling.klab.data.Payload.Builder newBuilder() {
    return new org.integratedmodelling.klab.data.Payload.Builder();
  }

  /**
   * Creates a new Payload RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Payload RecordBuilder
   */
  public static org.integratedmodelling.klab.data.Payload.Builder newBuilder(org.integratedmodelling.klab.data.Payload.Builder other) {
    if (other == null) {
      return new org.integratedmodelling.klab.data.Payload.Builder();
    } else {
      return new org.integratedmodelling.klab.data.Payload.Builder(other);
    }
  }

  /**
   * Creates a new Payload RecordBuilder by copying an existing Payload instance.
   * @param other The existing instance to copy.
   * @return A new Payload RecordBuilder
   */
  public static org.integratedmodelling.klab.data.Payload.Builder newBuilder(org.integratedmodelling.klab.data.Payload other) {
    if (other == null) {
      return new org.integratedmodelling.klab.data.Payload.Builder();
    } else {
      return new org.integratedmodelling.klab.data.Payload.Builder(other);
    }
  }

  /**
   * RecordBuilder for Payload instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Payload>
    implements org.apache.avro.data.RecordBuilder<Payload> {

    private java.util.List<org.integratedmodelling.klab.data.Notification> notifications;
    private java.util.List<org.integratedmodelling.klab.data.State> states;
    private java.util.List<org.integratedmodelling.klab.data.Instance> instances;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.integratedmodelling.klab.data.Payload.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.notifications)) {
        this.notifications = data().deepCopy(fields()[0].schema(), other.notifications);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.states)) {
        this.states = data().deepCopy(fields()[1].schema(), other.states);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.instances)) {
        this.instances = data().deepCopy(fields()[2].schema(), other.instances);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Payload instance
     * @param other The existing instance to copy.
     */
    private Builder(org.integratedmodelling.klab.data.Payload other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.notifications)) {
        this.notifications = data().deepCopy(fields()[0].schema(), other.notifications);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.states)) {
        this.states = data().deepCopy(fields()[1].schema(), other.states);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.instances)) {
        this.instances = data().deepCopy(fields()[2].schema(), other.instances);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'notifications' field.
      * @return The value.
      */
    public java.util.List<org.integratedmodelling.klab.data.Notification> getNotifications() {
      return notifications;
    }


    /**
      * Sets the value of the 'notifications' field.
      * @param value The value of 'notifications'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Payload.Builder setNotifications(java.util.List<org.integratedmodelling.klab.data.Notification> value) {
      validate(fields()[0], value);
      this.notifications = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'notifications' field has been set.
      * @return True if the 'notifications' field has been set, false otherwise.
      */
    public boolean hasNotifications() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'notifications' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Payload.Builder clearNotifications() {
      notifications = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'states' field.
      * @return The value.
      */
    public java.util.List<org.integratedmodelling.klab.data.State> getStates() {
      return states;
    }


    /**
      * Sets the value of the 'states' field.
      * @param value The value of 'states'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Payload.Builder setStates(java.util.List<org.integratedmodelling.klab.data.State> value) {
      validate(fields()[1], value);
      this.states = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'states' field has been set.
      * @return True if the 'states' field has been set, false otherwise.
      */
    public boolean hasStates() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'states' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Payload.Builder clearStates() {
      states = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'instances' field.
      * @return The value.
      */
    public java.util.List<org.integratedmodelling.klab.data.Instance> getInstances() {
      return instances;
    }


    /**
      * Sets the value of the 'instances' field.
      * @param value The value of 'instances'.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Payload.Builder setInstances(java.util.List<org.integratedmodelling.klab.data.Instance> value) {
      validate(fields()[2], value);
      this.instances = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'instances' field has been set.
      * @return True if the 'instances' field has been set, false otherwise.
      */
    public boolean hasInstances() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'instances' field.
      * @return This builder.
      */
    public org.integratedmodelling.klab.data.Payload.Builder clearInstances() {
      instances = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Payload build() {
      try {
        Payload record = new Payload();
        record.notifications = fieldSetFlags()[0] ? this.notifications : (java.util.List<org.integratedmodelling.klab.data.Notification>) defaultValue(fields()[0]);
        record.states = fieldSetFlags()[1] ? this.states : (java.util.List<org.integratedmodelling.klab.data.State>) defaultValue(fields()[1]);
        record.instances = fieldSetFlags()[2] ? this.instances : (java.util.List<org.integratedmodelling.klab.data.Instance>) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Payload>
    WRITER$ = (org.apache.avro.io.DatumWriter<Payload>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Payload>
    READER$ = (org.apache.avro.io.DatumReader<Payload>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.notifications.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (org.integratedmodelling.klab.data.Notification e0: this.notifications) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.states.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (org.integratedmodelling.klab.data.State e1: this.states) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.instances.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (org.integratedmodelling.klab.data.Instance e2: this.instances) {
      actualSize2++;
      out.startItem();
      e2.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<org.integratedmodelling.klab.data.Notification> a0 = this.notifications;
      if (a0 == null) {
        a0 = new SpecificData.Array<org.integratedmodelling.klab.data.Notification>((int)size0, SCHEMA$.getField("notifications").schema());
        this.notifications = a0;
      } else a0.clear();
      SpecificData.Array<org.integratedmodelling.klab.data.Notification> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.Notification>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          org.integratedmodelling.klab.data.Notification e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new org.integratedmodelling.klab.data.Notification();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<org.integratedmodelling.klab.data.State> a1 = this.states;
      if (a1 == null) {
        a1 = new SpecificData.Array<org.integratedmodelling.klab.data.State>((int)size1, SCHEMA$.getField("states").schema());
        this.states = a1;
      } else a1.clear();
      SpecificData.Array<org.integratedmodelling.klab.data.State> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.State>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          org.integratedmodelling.klab.data.State e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new org.integratedmodelling.klab.data.State();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<org.integratedmodelling.klab.data.Instance> a2 = this.instances;
      if (a2 == null) {
        a2 = new SpecificData.Array<org.integratedmodelling.klab.data.Instance>((int)size2, SCHEMA$.getField("instances").schema());
        this.instances = a2;
      } else a2.clear();
      SpecificData.Array<org.integratedmodelling.klab.data.Instance> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.Instance>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          org.integratedmodelling.klab.data.Instance e2 = (ga2 != null ? ga2.peek() : null);
          if (e2 == null) {
            e2 = new org.integratedmodelling.klab.data.Instance();
          }
          e2.customDecode(in);
          a2.add(e2);
        }
      }

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<org.integratedmodelling.klab.data.Notification> a0 = this.notifications;
          if (a0 == null) {
            a0 = new SpecificData.Array<org.integratedmodelling.klab.data.Notification>((int)size0, SCHEMA$.getField("notifications").schema());
            this.notifications = a0;
          } else a0.clear();
          SpecificData.Array<org.integratedmodelling.klab.data.Notification> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.Notification>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              org.integratedmodelling.klab.data.Notification e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new org.integratedmodelling.klab.data.Notification();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<org.integratedmodelling.klab.data.State> a1 = this.states;
          if (a1 == null) {
            a1 = new SpecificData.Array<org.integratedmodelling.klab.data.State>((int)size1, SCHEMA$.getField("states").schema());
            this.states = a1;
          } else a1.clear();
          SpecificData.Array<org.integratedmodelling.klab.data.State> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.State>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              org.integratedmodelling.klab.data.State e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new org.integratedmodelling.klab.data.State();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 2:
          long size2 = in.readArrayStart();
          java.util.List<org.integratedmodelling.klab.data.Instance> a2 = this.instances;
          if (a2 == null) {
            a2 = new SpecificData.Array<org.integratedmodelling.klab.data.Instance>((int)size2, SCHEMA$.getField("instances").schema());
            this.instances = a2;
          } else a2.clear();
          SpecificData.Array<org.integratedmodelling.klab.data.Instance> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<org.integratedmodelling.klab.data.Instance>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              org.integratedmodelling.klab.data.Instance e2 = (ga2 != null ? ga2.peek() : null);
              if (e2 == null) {
                e2 = new org.integratedmodelling.klab.data.Instance();
              }
              e2.customDecode(in);
              a2.add(e2);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










