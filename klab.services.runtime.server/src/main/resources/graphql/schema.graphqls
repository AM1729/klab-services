type Query {
    # all contexts, for admins
    contexts: [Context]!
    # one context, no parameters as the context ID must be in the scope header
    context: Context
}

type Mutation {
    # submit the data for an observation and obtain the observation ID, also the task ID of its resolution
    observe(observation: ObservationInput): String
}

type Context {
    id: String!
    name: String!
    geometry: Geometry!
    observer: Observation!
}


type Geometry {
    multiplicity: Int!
    # mandatorily a WKB string
    shape: String
    grid: Grid
    time: Time
}

type Grid {
    xCells: Int
    yCells: Int
}

type Time {
    # seconds from epoch (should be converted to long)
    start: Float
    # seconds from epoch (should be converted to long)
    end: Float
}

enum Status { STARTED, FINISHED, ABORTED }
enum Level { DEBUG, INFO, WARNING, ERROR }

type Observation {
    id: String!
    observable: String!
    resolution: Status!
    notifications: [Notification]
}

type Notification {
    level: Level
    message: String
}

# The silly input types, identical to the output types but they all must be duplicated

input ObservationInput {
    name: String
    observable: String!
    space: String
    start: Float
    end: Float
}
